;; that's a cleaned version of the .emacs for a "vanilla" Emacs
;; We're adding our own set of of extensions and are in addition
;; overwriting the org-mode that comes with Emacs.

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Setting the font
;;
;; These fonts have to be installed manually!
;; the one below works nice on MacOS with retina display.
(set-default-font "-*-Inconsolata-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1")
(set-face-attribute 'default nil :font "-*-Inconsolata-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1")
;;
;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; MAC specific settings
;;
;; manually specify the path!
(setenv "PATH"
    (concat (getenv "PATH")
    ":~/bin:/usr/local/bin:/usr/bin:/bin"))
;; in order to be able to write {} and []
(setq default-input-method "MacOSX")
(setq ns-alternate-modifier 'meta)        ;; left alt is meta
(setq ns-right-alternate-modifier 'nil)   ;; right alt is alt
(setq mouse-drag-copy-region nil)  ; stops selection with a mouse being immediately injected to the kill ring
;(mouse-wheel-mode t)			; activate mouse scrolling
(global-font-lock-mode t)		; syntax highlighting
(transient-mark-mode t)			; sane select (mark) mode
;(delete-selection-mode t)		; entry deletes marked text
;(show-paren-mode t)			; match parentheses
;(add-hook 'text-mode-hook 'turn-on-auto-fill) ; wrap long lines in text mode
;;
;;;;


;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; custom settings
;;
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(tool-bar-mode nil)
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
;;
;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; other settings
;;
;; line wrapping and similar...
;;(setq-default word-wrap t)
;;(electric-indent-mode 1)
(show-paren-mode 1)
(setq-default show-paren-mode t)		; match parenthesis
(setq-default tool-bar-mode nil)		; hide the button/menu bar
;;(setq auto-fill-mode -1)
;;(setq-default fill-column 99999) ;; if everything else fails
;;(setq fill-column 99999)         ;; if everything else fails
(add-hook 'text-mode-hook 'turn-on-auto-fill) ; wrap long lines in text mode
(setq-default fill-column 80)
;;(remove-hook 'text-mode-hook 'turn-on-auto-fill)
;4(remove-hook 'noweb-select-doc-mode-hook 'noweb-auto-fill-doc-mode)     ;; disable the auto-fill-mode in noweb files
;4(remove-hook 'noweb-select-code-mode-hook 'noweb-auto-fill-code-mode)   ;; the same
;; show line numbers by default. use "M-x linum-mode" to toggle
;;(global-linum-mode nil)
(setq make-backup-files nil)
;; other settings
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)  ;; visual line mode on only in text files.
;; disable debug on error
(setq debug-on-error nil)
;;
;; kill all other buffers, except the current one.
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (dolist (buffer (buffer-list))
    (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
      (kill-buffer buffer)))
  )
;; add shortcut
(global-set-key (kbd "C-c k") 'kill-other-buffers)
;;
;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Themes:
;;
;; NOTE: install the themes using
;; https://github.com/jotsetung/memacs.git , call "make all" in the "themes" subfolder.
;; Themes, load with "M-x load-theme"
(add-to-list 'load-path "~/.emacs.d/site-lisp/")
(add-to-list 'load-path "~/.emacs.d/themes/")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
;; solarized customization
;; make the fringe stand out from the background
;(setq solarized-distinct-fringe-background t)
;; make the modeline high contrast
;;(setq solarized-high-contrast-mode-line t)
(setq flatui-high-contrast-mode-line t)
;; Use high contrast code block header background (or not)
(setq flatui-high-contrast-code-block-header nil)
(load-theme 'flatui-light t)
;(load-theme 'solarized-dark t)
;(setq solarized-scale-org-headlines t)
;;(load-theme 'solarized-light t)
;;(load-theme 'solarized-dark t)
;;(load-theme 'FlatUI t)
;;
;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Packages and stuff


;;;;;;;;;;;;;;;;;;;;;;;;
;; from https://github.com/purcell/exec-path-from-shell.git
;; Load environment variables from the shells
(require 'exec-path-from-shell)
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
;; loading additional environment variables.
(exec-path-from-shell-copy-env "PERL5LIB")
(exec-path-from-shell-copy-env "LC_ALL")    ; this somehow prevents segfauls of R parallel processing in Emacs
(exec-path-from-shell-copy-env "LANG")    ; this somehow prevents segfauls of R parallel processing in Emacs
(exec-path-from-shell-copy-env "SHELL")
;;
;;;;


;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; AUCTex
;;
;; path where auctex has been installed...
(add-to-list 'load-path "~/.emacs.d/site-lisp")
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
(setq reftex-plug-into-AUCTeX t)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
;; Minimal OS X-friendly configuration of AUCTeX. Since there is no
;; DVI viewer for the platform, use pdftex/pdflatex by default for
;; compilation. Furthermore, use 'open' to view the resulting PDF.
;; Until Preview learns to refresh automatically on file updates, Skim
;; (http://skim-app.sourceforge.net) is a nice PDF viewer.
(setq TeX-PDF-mode t)
    (setq TeX-view-program-selection
    '(((output-dvi style-pstricks)
        "dvips and PDF Viewer")
        (output-dvi "PDF Viewer")
        (output-pdf "PDF Viewer")
        (output-html "Safari")))
        (setq TeX-view-program-list
        '(("dvips and PDF Viewer" "%(o?)dvips %d -o && open %f")
        ("PDF Viewer" "open %o")
        ("Safari" "open %o")))
;; Add standard Sweave file extensions to the list of files recognized
;; by AUCTeX.
(setq TeX-file-extensions
      '("Rnw" "rnw" "Snw" "snw" "tex" "sty" "cls" "ltx" "texi" "texinfo" "dtx"))
;;
;;;;

;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; outline-minor-mode
;;
;(defun turn-on-outline-minor-mode()
;  (outline-minor-mode 1))
;(add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
;(add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
;(setq outline-minor-mode-prefix "C-c C-o")
;; C-c C-o C-l hide section content
;; C-c C-o C-n move to next section
;; C-c C-o C-p previous section
;; C-c C-o C-a show all
;;
;;;;

;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; auto-complete
;;
(add-to-list 'load-path "~/.emacs.d/site-lisp/auto-complete" )
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/site-lisp/auto-complete/ac-dict")
(setq ac-comphist-file "~/.emacs.d/site-lisp/auto-complete/ac-comphist.dat")
(ac-config-default)
;; start auto-completing after 4 characters or disable.
(setq ac-auto-start nil)
;; Show menu 0.8 seconds later
(setq ac-auto-show-menu 0.8)
;; disable auto show help.
(setq ac-use-quick-help nil)
;; set the delay to 1 second, so it's not always bugging
(setq ac-delay 1)
;(setq ac-auto-start nil)
(ac-set-trigger-key "TAB")
(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
;; start quick help with M-h
(define-key ac-completing-map (kbd "M-h") 'ac-quick-help)
;;
;;;;


;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ESS
;;
(add-to-list 'load-path "~/.emacs.d/site-lisp/ess")
;;(require 'ess-site)
(load "ess-site.el")
;;(require 'ess-eldoc)
;; Uncomment below if we're getting problems doing an ediff on an R-file with magit.
;;(add-to-list 'auto-mode-alist '("\\.R" . ess-mode))
;;(require 'ess-custom)
;; Somehow that sucker seems to be missing...
;;(defvar ess-local-customize-alist nil "Buffer local settings for proper behaviour")
(setq-default inferior-R-args "--no-save ")
;; automatically start R in the present directory. useful for async org export
(setq ess-ask-for-ess-directory nil)
;; toggle the option to ask for R to start.
(defun toggle-ask-R ()
  "Toggle the option for ESS to ask to start R in directory or to just start it."
    (interactive)
      (if (eq ess-ask-for-ess-directory nil)
            (setq ess-ask-for-ess-directory t)
                (setq ess-ask-for-ess-directory nil)))
;; This will set Ctrl-g to toggle but you can set it to anything
;; you want.
(global-set-key [(control meta g)] 'toggle-ask-R)
;; Automagically delete trailing whitespace when saving R script
;; files. One can add other commands in the ess-mode-hook below.
(add-hook 'ess-mode-hook
      '(lambda()
	(add-hook 'write-file-functions
	(lambda ()
	(ess-nuke-trailing-whitespace)))
	(setq ess-nuke-trailing-whitespace-p t)))
;; disable the replacing of undescore with assignment
(ess-toggle-underscore nil)
;;
;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tramp for remote ssh/files etc.
;;
;; tramp (transparent remote ...)
(require 'tramp)
(setq tramp-default-method "ssh")
;;
;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; org-mode
;;
;; At first, we make sure that our modifications in .emacs
;; are applied _after_ default.el is read/
;; Note: org is a part of Emacs, so we have to overwrite! the files
;; in /Applications/Emacs.app/Contents/Resources etc:
;; load a separately installed org
;; (add-to-list 'load-path "/Applications/Emacs.app/Contents/Resources/lisp/org")
;; Configuring org mode to know about R and set some reasonable default behavior
(add-to-list 'load-path "~/.emacs.d/site-lisp/org")
(require 'ess-site)
;(require 'org-install)
(require 'ob-tangle)
(require 'ob-latex)
(require 'ob-R)
(require 'ob-shell)
;(require 'ob-sh)
;(require 'ox-latex)
(require 'ox-html)
(require 'ox-beamer)
(require 'ox-md)
;;(require 'ox-bibtex)
;2(require 'org-eval)
;; enable fontify:
;2(setq org-src-fontify-natively t)
;(setq org-startup-indented t)  ;; automatic indentation and hiding of **
;; bullets for TODO items
(require 'org-bullets)
;; Override the bullets.
(setq org-bullets-bullet-list '(
				"◉"
				"●"
				"○"
				"▶"
				"◆"
				"◇"
				))
;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
;; set org-mode for all .org files.
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
;; Hide the markup elements:
(setq org-hide-emphasis-markers t)
;; scale images by default to 400px, otherwise (if there is an #+ATTR.* :width 200px to 200)
;; set to nil in case no default scaling should be done.
;2(setq org-image-actual-width '(400))
;; globally disabling sub and superscripts...
(setq org-export-with-sub-superscripts '{})
(setq org-use-sub-superscripts '{})
;; load R and some other languages language...
(org-babel-do-load-languages 'org-babel-load-languages '((R . t)
							 (emacs-lisp . t)
							 (sqlite . t)
							(latex . t)))
;; save the window set-up; forces the layout to be restore after agenda is closed.
(setq org-agenda-window-setup 'current-window)
;; treat lists like headers:
(setq org-cycle-include-plain-lists 'integrate)
;; automatically add all org files as agenda files.
;; just add all folders you want to be screened.
(load-library "find-lisp")

;; only calls find-lisp-find-files if the directory exists.
(defun find-lisp-find-files-if-exists (directory regexp)
  (if (file-exists-p directory)
      (find-lisp-find-files directory regexp)
    )
  )

(add-hook 'org-agenda-mode-hook (lambda ()
    (setq org-agenda-files
	  (append
	   (find-lisp-find-files-if-exists "~/R-workspaces/2012" "\.org$")
	   (find-lisp-find-files-if-exists "~/Projects/git" "\.org$")
    ))
))
;; define custom TODO keywords.
(setq org-todo-keywords
       '((sequence "TODO(t)" "WAIT(w@/!)" "VERIFY(v@)" "REDO(r@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
(setq org-todo-keyword-faces
;	'(("TODO" . (:foreground "DeepPink1" :weight bold :slant italic :underline t))
	'(("TODO" . (:foreground "#f39c12" :weight bold :slant italic :underline t))
	("WAIT" . (:foreground "#3498db" :slant italic :underline t))
	("DONE" . (:foreground "#27ae60" :slant italic :undeline t))
	("CANCELED" . (:foreground "#9b59b6" :weight bold :slant italic :underline t))
	("REDO" . (:foreground "#e74c3c" :weight bold :slant italic :underline t))
	("VERIFY" . (:foreground "#e74c3c" :weight bold :slant italic :underline t))
	))
;; we don't want to always say "yes" please execute code...
(setq org-confirm-babel-evaluate nil)

(setq org-latex-listings 'minted)
;(setq org-latex-custom-lang-environments
;       '(
;	(R "Rcode")
;	))

;; show created images inline in the org buffer, just have to find a way to reduce their size...
;(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
;(add-hook 'org-mode-hook 'org-display-inline-images)
;; modify the pdf process. (idea: call latexmk -C %f afterwards?)
(setq org-latex-pdf-process (quote ("latexmk -pdflatex='pdflatex --shell-escape' -latex='latex --shell-escape' -gg -f -cd -pdf %f")))
(setq org-latex-listings 'minted
      org-latex-minted-options
      '(
	;; ("frame" "lines")
	("bgcolor" "lightgrey")
        ("fontsize" "\\scriptsize")
	;; ("linenos=true")
	;; ("linenos" "")
	)
      )
;; additional latex packages we always want to be added for latex export.
(add-to-list 'org-latex-packages-alist '("" "minted"))
(add-to-list 'org-latex-packages-alist '("" "float"))
(add-to-list 'org-latex-packages-alist '("" "xcolor"))

;; default skeleton for org files:
(define-skeleton org-skeleton
  "Header info for a emacs-org file."
  "Title: "
  "#+TITLE:" str " \n"
  "#+AUTHOR: Johannes Rainer\n"
  "#+email: johannes.rainer@eurac.edu\n"
  "#+OPTIONS: ^:{}\n"
  "#+PROPERTY: exports code \n"
  "#+PROPERTY: session *R*\n"
  "#+PROPERTY: noweb eval\n"
  "#+PROPERTY: results output\n"
  "#+PROPERTY: tangle yes\n"
  "#+STARTUP: overview\n"
  "#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js\n"
  "#+HTML_HEAD: <link rel='stylesheet' type='text/css' href='http://thomasf.github.io/solarized-css/solarized-light.min.css' />\n"
  "#+LATEX_HEADER: \\usepackage[backend=bibtex,style=nature,hyperref=true]{biblatex}\n"
  "#+LATEX_HEADER: \\usepackage{parskip}\n"
  "#+LATEX_HEADER: \\usepackage{tabu}\n"
  "#+LATEX_HEADER: \\setlength{\\textwidth}{17.0cm}\n"
  "#+LATEX_HEADER: \\setlength{\\hoffset}{-2.5cm}\n"
  "#+LATEX_HEADER: \\setlength{\\textheight}{22cm}\n"
  "#+LATEX_HEADER: \\setlength{\\voffset}{-1.5cm}\n"
  "#+LATEX_HEADER: \\addbibresource{~/Documents/Unison/bib/references.bib}\n"
  "# #+LATEX_HEADER: \\usepackage{verbatim}\n"
  "#+LATEX_HEADER: \\usepackage{inconsolata}\n"
  "#+LATEX_HEADER: \\definecolor{lightgrey}{HTML}{F0F0F0}\n"
  "#+LATEX_HEADER: \\definecolor{solarizedlightbg}{HTML}{FCF4DC}\n"
  "#+LATEX_HEADER: \\makeatletter\n"
  "# #+LATEX_HEADER: \\def\\verbatim@font{\\scriptsize\\ttfamily}\n"
  "#+LATEX_HEADER: \\makeatother\n"
  "#+FILETAGS:\n"
  "#+CATEGORY:\n"
  "-----"
  )
(global-set-key [C-S-f4] 'org-skeleton)
;; org-Rmd template
(define-skeleton org-Rmd
  "Header infor for org-Rmd files."
  "Title: "
  "#+TITLE:" str " \n"
  "#+AUTHOR: Johannes Rainer\n"
  "#+email: johannes.rainer@eurac.edu\n"
  "#+OPTIONS: ^:{} toc:nil\n"
  "#+PROPERTY: export code\n"
  "#+PROPERTY: session *R*\n"
  "#+FILETAGS:\n"
  "#+CATEGORY:\n\n"
  "#+BEGIN_HTML\n"
  "---\n"
  "title: \"" str "\" \n"
  "author: \"Johannes Rainer\"\n"
  "date: \n"
  "graphics: yes\n"
  "output:\n"
  "  BiocStyle::html_document:\n"
  "    toc_depth: 2\n"
  "  BiocStyle::pdf_document:\n"
  "    toc_depth: 2\n"
  "---\n"
  "#+END_HTML\n\n"
  "#+BEGIN_SRC R :ravel echo=FALSE, results=\'asis\', message=FALSE\n"
  "  BiocStyle::markdown()\n"
  "#+END_SRC\n"
  )
(global-set-key [C-S-f5] 'org-Rmd)
;(add-hook 'org-export-before-processing-hook 'org-export-process-apply-macros)
;; place captions below tables, not above
(setq org-latex-caption-above nil)
(setq org-export-latex-table-caption-above nil)
;; these custom agenda views will be displayed in the org-mobile app
(setq org-tag-alist '(("analysis" . ?n) ("ageing" . ?A) ("collab" . ?c) ("EURAC" . ?E)
		      ("EURA-K" . ?K) ("noexport" . ?N) ("paper" . ?a) ("private" . ?p)
		      ("project" . ?P) ("review" . ?r) ("work" . ?w) ))
(setq org-agenda-custom-commands
      '(("p" "Private TODOs"
	 ((tags-todo "private")
	  ))
	("w" "Work related TODOs"
	 (
	  (tags-todo "work+analysis")
	  (tags-todo "work+project")
	  (tags-todo "work+paper")
	  (tags-todo "work+collab")
	  (tags-todo "work-analysis-project-paper-collab")
	  ))
	))
;; org-export settings:
;; allows to define a init file other than the default one, specifically
;; useful if async export yields e.g. an error complaining that the font
;; can not be found.
(setq org-export-async-init-file "/Users/jo/.emacs-async-init.el")
;; try this for gplots evaluation
(setq org-babel-use-quick-and-dirty-noweb-expansion t)
;; org-journal settings:
;2(require 'org-journal)
;2(setq org-journal-dir "/Users/jo/org-files/journal/")
;2(global-set-key (kbd "C-c C-n") 'org-journal-new-entry)
;;
;;;;


;;;;;;;;;;;;;;;;;;;;;;;;
;; markdown
;;
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))



;;;;;;;;;;;;;;;;;;;;;;;;
;; polymode
;;
(add-to-list 'load-path "~/.emacs.d/site-lisp/polymode")
(add-to-list 'load-path "~/.emacs.d/site-lisp/polymode/modes")
;;(require 'poly-base)
(require 'poly-R)
(require 'poly-markdown)
;;(require 'poly-org)

;;(add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))

;;;; ORG
;;;(add-to-list 'auto-mode-alist '("\\.org" . poly-org-mode))


;;;; R related modes
(add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
;;;(add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
;;;(add-to-list 'auto-mode-alist '("\\.Rd" . poly-markdown+r-mode))


;;;;;;;;;;;;;;;;;;;;;;;;
;; markdown-preview
;;
;;(require 'websocket)
;;(require 'markdown-preview)

;;;;;;;;;;;;;;;;;;;;;;;;
;; Magit, git control
;;
(add-to-list 'load-path "~/.emacs.d/site-lisp/magit")
(require 'magit)
(require 'magit-svn)
(setq magit-repo-dirs-depth 4)
(setq magit-last-seen-setup-instructions "1.4.0")
;;
;;;;



;;;;;;;;;;;;;;;;;;;;;;;;
;; other stuff
;;
;; itunes control...
;; (load "osx-itunes")
;; frame commands: cool stuff to increase/decrease frames
(load "frame-cmds")
;; incrementally resizing frame
(global-set-key [(control meta down)]          'enlarge-frame)
(global-set-key [(control meta right)]         'enlarge-frame-horizontally)
(global-set-key [(control meta up)]            'shrink-frame)
(global-set-key [(control meta left)]          'shrink-frame-horizontally)
;; positioning of frame
(global-set-key [(control meta shift right)]   'move-frame-to-screen-right)    ; like `C-next'
(global-set-key [(control meta shift left)]    'move-frame-to-screen-left)     ; like `C-prior'
(global-set-key [(control meta shift up)]      'move-frame-to-screen-top)    ; like `C-next'
(global-set-key [(control meta shift down)]    'move-frame-to-screen-bottom)     ; like `C-prior'
;; maximize frame
(global-set-key [(control meta +)]             'toggle-max-frame-vertically)
(global-set-key [(control meta -)]             'toggle-max-frame-horizontally)
;; tile frames
(global-set-key [(control meta .)]             'tile-frames-horizontally)
;;;; weather forecast from met.no
;; see https://github.com/ruediger/weather-metno-el
;; call "M-x weather-metno-forecast-location
;; or add %%(org-weather-metno) to agenda files.
;(load "weather-metno")
;(load "org-weather-metno")
;(load "weather-metno-mode-line")
;(load "weather-metno-query")
;(setq weather-metno-location-name "Innsbruck, Austria"
;    weather-metno-location-latitude 47.2
;    weather-metno-location-longitude 11.4)
;(setq weather-metno-location-name "Meran, Italy"
;    weather-metno-location-latitude 46.6
;    weather-metno-location-longitude 11.1)
;;;;
;; the ox-ravel Sweave export module
(require 'ox-ravel)
;;
;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;
;; ssh
;;
(require 'ssh)
(setq ssh-display-follow-current-frame t)
(setq ssh-explicit-args '("-Y"))
;;
;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;
;; other stuff from Vince Gaulet's Emacs:
;;
(add-to-list 'vc-handled-backends 'SVN)
(require 'psvn)
(require 'framepop)
;(require 'import-env-from-shell)
;;
;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;
;; auto-lang to automatically set the language for ispell.
;;
(require 'auto-lang)
(defun fd-switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
    	 (change (if (string= dic "deutsch8") "english" "deutsch8")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)
    ))

(global-set-key (kbd "<f8>")   'fd-switch-dictionary)
;;
;;;;



;;;;;;;;;;;;;;;
;; perl
;; use cperl-mode instead of perl-mode for perl.
(defalias 'perl-mode 'cperl-mode)
;;
;;;;

;;;;;;;;;;;;;;;
;; arduino
(setq auto-mode-alist (cons '("\\.\\(pde\\|ino\\)$" . arduino-mode) auto-mode-alist))
(autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t)
;;
;;;;

;;;;;;;;;;
;; auto load file:
(global-set-key (kbd "<f7>") (lambda() (interactive)(find-file "~/org-files/Weekly/2015-weekly.org")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Spell checking
;;
;; use aspell instead of ispell:
(setq-default ispell-program-name "aspell")  ;; or just symlink ispell to aspell...
(add-hook 'TeX-mode-hook
	  (lambda()
	    (flyspell-mode 1))
	    )
(add-hook 'latex-mode-hook
	  (lambda()
	    (flyspell-mode 1))
	    )
(add-hook 'org-mode-hook
	  (lambda()
	    (flyspell-mode 1))
	    )
(add-hook 'ess-mode-hook
	  (lambda()
	    (flyspell-mode 0))
	    )
(setq ispell-list-command "--list")
;;
;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; zoom-frame
;;
(require 'zoom-frm)
(global-set-key (kbd "C-x C-+") 'zoom-in)
(global-set-key (kbd "C-x C--") 'zoom-out)

;;;;;;;;;;;;;;;;;;;;;;;;
;; ioslides
;;
(add-to-list 'load-path "~/.emacs.d/site-lisp/org-ioslide")
(require 'ox-ioslide)


;;;;;;;;;;;;;;;;;;;;;;;;
;; org-tree-slide
;;
(require 'org-tree-slide)
(global-set-key (kbd "<f9>") 'org-tree-slide-mode)
(global-set-key (kbd "S-<f9>") 'org-tree-slide-skip-done-toggle)

;;;;;;;;;;;;;;;;;;;;;;;;
;; epresent
;;
(require 'epresent)
(global-set-key (kbd "<f6>") 'epresent-run)

;;;;;;;;;;;;;;;;;;;;;;;;
;; org-sync
;;
;; Just loading github for now; could also do org-sync-bb and org-sync-redmine
(mapc 'load
      '("org-sync" "org-sync-github"))
